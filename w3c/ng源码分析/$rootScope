function $RootScopeProvider() {
		var TTL = 10,
			$rootScopeMinErr = minErr("$rootScope");
		this.digestTtl = function(value) {
			return arguments.length && (TTL = value), TTL
		}, this.$get = ["$injector", "$exceptionHandler", "$parse", "$browser",
			function($injector, $exceptionHandler, $parse, $browser) {
				function Scope() {
					this.$id = nextUid(), //Scope的Id 001-999
					this.$$phase = //标志是否在$digest阶段
					this.$parent = //当前scope的父
					this.$$watchers = //监听数组
					this.$$nextSibling = //下一个兄弟
					this.$$prevSibling = //上一个兄弟
					this.$$childHead = //子节点头
					this.$$childTail = null, //子节点尾
					this["this"] = this.$root = this, //当前的根节点
					this.$$destroyed = !1, //是否被销毁，$destroy方法中使用
					this.$$asyncQueue = [], //异步调用队列
					this.$$postDigestQueue = [], //digest执行结束后执行的队列
					this.$$listeners = {}, //保存监听事件
					this.$$isolateBindings = {}//
				}

				//开始digest循环
				function beginPhase(phase) {
					if ($rootScope.$$phase) throw $rootScopeMinErr("inprog", "{0} already in progress", $rootScope.$$phase);
					$rootScope.$$phase = phase
				}
				//结束循环
				function clearPhase() {
					$rootScope.$$phase = null
				}
				//编译exp，返回一个函数
				function compileToFn(exp, name) {
					var fn = $parse(exp);
					return assertArgFn(fn, name), fn
				}
				//initWatchVal是个空的对象
				function initWatchVal() {}

				Scope.prototype = {
					//为Scope对象添加一些方法。
					constructor: Scope,
					//创建一个新Scope
					$new: function(isolate) {
						var Child, child;
						//如果是隔离Scope，创建新的Scope;否则，创建新的Scope，继承当前Scope（原型继承，将子的prototype设置为父的实例即可）
						isolate ? (child = new Scope, child.$root = this.$root, child.$$asyncQueue = this.$$asyncQueue, child.$$postDigestQueue = this.$$postDigestQueue) 
								: (Child = function() {}, Child.prototype = this, child = new Child, child.$id = nextUid()), 
						child["this"] = child, 
						child.$$listeners = {}, 
						child.$parent = this, 
						child.$$watchers = child.$$nextSibling = child.$$childHead = child.$$childTail = null, 
						child.$$prevSibling = this.$$childTail, //设置子的上一个兄弟节点为父节点子节点的尾
						//若父节点有子节点，设置父节点子节点尾的下一个兄弟节点为新创建的节点，尾节点为当前节点
						//无子节点，设置父节点的子节点头和尾均为当前节点
						this.$$childHead ? (this.$$childTail.$$nextSibling = child, this.$$childTail = child) 
										 : this.$$childHead = this.$$childTail = child, 
						return child;
					},
					//监听watchExp表达式，执行listener方法
					//参数：watchExp：监听的表达式；listener监听函数；objectEquality是否深度监听
					//逻辑：解析监听表达式，创建watcher对象，加入scope的$$watcher数组
					//返回值：是一个函数，调用可以将当前监听器移除。
					$watch: function(watchExp, listener, objectEquality) {
						var scope = this,
							get = compileToFn(watchExp, "watch"),//将watchExp转为函数
							array = scope.$$watchers,//当前监听的数组
							watcher = {
								fn: listener,
								last: initWatchVal,//空对象
								get: get,//监听的函数
								exp: watchExp,//表达式
								eq: !! objectEquality//是否
							};//创建一个watch对象
						if (!isFunction(listener)) {//若第二个参数listener不为函数
							var listenFn = compileToFn(listener || noop, "listener");//将其转为函数
							watcher.fn = function(newVal, oldVal, scope) {//重新设置fn
								listenFn(scope)
							}
						}
						if ("string" == typeof watchExp && get.constant) {//如果表达式为字符串常量
							var originalFn = watcher.fn;
							watcher.fn = function(newVal, oldVal, scope) {
								originalFn.call(this, newVal, oldVal, scope), 
								arrayRemove(array, watcher)//执行一次将watcher移除
							}
						}
						//将watcher对象加入当前Scope的监听数组
						array || (array = scope.$$watchers = []), array.unshift(watcher),
						return function() {
							arrayRemove(array, watcher)
						}
					},

					//
					//参数：
					//逻辑：
					//返回值：
					$watchCollection: function(obj, listener) {

						var oldValue, newValue, self = this,
							changeDetected = 0,
							objGetter = $parse(obj),
							internalArray = [],
							internalObject = {}, oldLength = 0;

						function $watchCollectionWatch() {
							newValue = objGetter(self);//获取新值
							var newLength, key;
							if (isObject(newValue))//若为对象
								if (isArrayLike(newValue)) {//若为数组
									oldValue !== internalArray && (oldValue = internalArray, oldLength = oldValue.length = 0, changeDetected++),
									newLength = newValue.length, 
									oldLength !== newLength && (changeDetected++, oldValue.length = oldLength = newLength);
									for (var i = 0; newLength > i; i++) 
										oldValue[i] !== newValue[i] && (changeDetected++, oldValue[i] = newValue[i])
								} else {//否则
									oldValue !== internalObject && (oldValue = internalObject = {}, oldLength = 0, changeDetected++), newLength = 0;
									for (key in newValue) newValue.hasOwnProperty(key) && (newLength++, oldValue.hasOwnProperty(key) ? oldValue[key] !== newValue[key] && (changeDetected++, oldValue[key] = newValue[key]) : (oldLength++, oldValue[key] = newValue[key], changeDetected++));
									if (oldLength > newLength) {
										changeDetected++;
										for (key in oldValue) oldValue.hasOwnProperty(key) && !newValue.hasOwnProperty(key) && (oldLength--, delete oldValue[key])
									}
								} else oldValue !== newValue && (oldValue = newValue, changeDetected++);
							return changeDetected
						}

						function $watchCollectionAction() {
							listener(newValue, oldValue, self)
						}

						return this.$watch($watchCollectionWatch, $watchCollectionAction)
					},

					//$digest循环
					$digest: function() {
						var watch, value, last, watchers, length, dirty, next, 
							current, logIdx, logMsg, asyncTask, asyncQueue = this.$$asyncQueue,
							postDigestQueue = this.$$postDigestQueue,
							ttl = TTL,
							target = this,//当前scope
							watchLog = [];
						beginPhase("$digest");//开始$digest
						//开始循环
						do {
							//设置dirty为false，遍历asyncQueue，从头开始执行asyncQueue内保存对象为 expression和scope
							for (dirty = !1, current = target; asyncQueue.length;) 
								try {
									asyncTask = asyncQueue.shift(), 
									asyncTask.scope.$eval(asyncTask.expression)//执行该表达式
								} catch (e) {
									$exceptionHandler(e)
								}
							do {
								if (watchers = current.$$watchers)//若当前scope的监听器不为空
									for (length = watchers.length; length--;) //遍历监听器
										try {
											watch = watchers[length], 
											watch && (value = watch.get(current)) !== (last = watch.last) 
											&& !(watch.eq ? equals(value, last) : "number" == typeof value && "number" == typeof last && isNaN(value) && isNaN(last)) 
											&& (dirty = !0, 
												watch.last = watch.eq ? copy(value) : value, 
												watch.fn(value, last === initWatchVal ? value : last, current), 
												5 > ttl && 
													(logIdx = 4 - ttl, 
													watchLog[logIdx] || (watchLog[logIdx] = []), 
													logMsg = isFunction(watch.exp) ? "fn: " + (watch.exp.name || watch.exp.toString()) : watch.exp, 
													logMsg += "; newVal: " + toJson(value) + "; oldVal: " + toJson(last), 
													watchLog[logIdx].push(logMsg)))
										} catch (e) {
											$exceptionHandler(e)
										}
										//遍历子scope的 深度 再广度
								if (!(next = current.$$childHead || current !== target && current.$$nextSibling))
									for (; current !== target && !(next = current.$$nextSibling);) 
											current = current.$parent
							} while (current = next);
						//dirty为true且ttl为0
						if (dirty && !ttl--) 
							throw clearPhase(), $rootScopeMinErr("infdig", "{0} $digest() iterations reached. Aborting!\nWatchers fired in the last 5 iterations: {1}", TTL, toJson(watchLog))
						} while (dirty || asyncQueue.length);

						//循环结束，遍历postDigestQueue执行
						for (clearPhase(); postDigestQueue.length;) 
							try {
								postDigestQueue.shift()()
							} catch (e) {
								$exceptionHandler(e)
							}
					},
					//销毁当前作用于
					$destroy: function() {
						//若当前不是rootScope且未被销毁
						if ($rootScope != this && !this.$$destroyed) {
							var parent = this.$parent;//
							this.$broadcast("$destroy"), //广播销毁事件
							this.$$destroyed = !0, //设置为已销毁
							//下面是设置指针
							parent.$$childHead == this && (parent.$$childHead = this.$$nextSibling), 
							parent.$$childTail == this && (parent.$$childTail = this.$$prevSibling), 
							this.$$prevSibling && (this.$$prevSibling.$$nextSibling = this.$$nextSibling), 
							this.$$nextSibling && (this.$$nextSibling.$$prevSibling = this.$$prevSibling), 
							this.$parent = this.$$nextSibling = this.$$prevSibling = this.$$childHead = this.$$childTail = null
						}
					},
					//在当前作用于执行表达式
					$eval: function(expr, locals) {
						return $parse(expr)(this, locals)
					},
					//异步执行
					$evalAsync: function(expr) {
						//若不在循环中且长度为0
						//创建defer开始循环
						$rootScope.$$phase || $rootScope.$$asyncQueue.length || $browser.defer(function() {
							$rootScope.$$asyncQueue.length && $rootScope.$digest()
						}), 
						//加入异步队列
						this.$$asyncQueue.push({
							scope: this,
							expression: expr
						})
					},
					//添加到digest循环结束后的事件
					$$postDigest: function(fn) {
						this.$$postDigestQueue.push(fn)
					},
					//
					$apply: function(expr) {
						try {
							 beginPhase("$apply");//设置循环阶段
							 return this.$eval(expr)//执行表达式
						} catch (e) {
							$exceptionHandler(e)
						} finally {
							clearPhase();//清除循环状态
							try {
								$rootScope.$digest()//最后尝试启动循环
							} catch (e) {
								throw $exceptionHandler(e), e
							}
						}
					},
					//添加监听
					$on: function(name, listener) {
						var namedListeners = this.$$listeners[name];//获取已有的监听事件
						//若没有监听事件，初始化为数组
						namedListeners || (this.$$listeners[name] = namedListeners = []), 
						namedListeners.push(listener),//将监听事件加入数组
						//返回一个函数，执行可以将此次的监听置为空
						return function() {
							namedListeners[indexOf(namedListeners, listener)] = null
						}
					},
					//向上传递监听事件
					$emit: function(name) {
						var namedListeners, i, length, empty = [],
							scope = this,
							stopPropagation = !1,
							event = {
								name: name,
								targetScope: scope,
								stopPropagation: function() {
									stopPropagation = !0
								},
								preventDefault: function() {
									event.defaultPrevented = !0
								},
								defaultPrevented: !1
							}, 

							listenerArgs = concat([event], arguments, 1);
						do {
							//遍历当前scope针对name的监听事件
							for (namedListeners = scope.$$listeners[name] || empty, event.currentScope = scope, i = 0, length = namedListeners.length; length > i; i++)
								if (namedListeners[i]) 
									try {
										namedListeners[i].apply(null, listenerArgs)//执行该事件
									} catch (e) {
										$exceptionHandler(e)
									} 
								else 
									namedListeners.splice(i, 1), i--, length--;
							if (stopPropagation) return event;//若设置为停止冒泡，则返回event对象
							scope = scope.$parent//设置scope为父scope
						} while (scope);
						return event
					},
					//广播事件
					$broadcast: function(name) {
						var listeners, i, length, target = this,
							current = target,
							next = target,
							event = {
								name: name,
								targetScope: target,
								preventDefault: function() {
									event.defaultPrevented = !0
								},
								defaultPrevented: !1
							}, listenerArgs = concat([event], arguments, 1);
						do {
							for (current = next, event.currentScope = current, listeners = current.$$listeners[name] || [], i = 0, length = listeners.length; length > i; i++)
								if (listeners[i]) try {
									listeners[i].apply(null, listenerArgs)
								} catch (e) {
									$exceptionHandler(e)
								} else listeners.splice(i, 1), i--, length--;
							if (!(next = current.$$childHead || current !== target && current.$$nextSibling))
								for (; current !== target && !(next = current.$$nextSibling);) current = current.$parent
						} while (current = next);
						return event
					}
				};
				var $rootScope = new Scope;
				return $rootScope
			}
		]
	}